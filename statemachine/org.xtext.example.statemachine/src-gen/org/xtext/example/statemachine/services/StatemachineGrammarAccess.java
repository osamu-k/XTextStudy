/*
* generated by Xtext
*/
package org.xtext.example.statemachine.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class StatemachineGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class StatemachineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Statemachine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStatemachineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cStatesKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cStatesAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStatesStateParserRuleCall_5_0 = (RuleCall)cStatesAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cEventsKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cLeftCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cEventsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cEventsEventParserRuleCall_9_0 = (RuleCall)cEventsAssignment_9.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cTransitionsKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Keyword cLeftCurlyBracketKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Assignment cTransitionsAssignment_13 = (Assignment)cGroup.eContents().get(13);
		private final RuleCall cTransitionsTransitionParserRuleCall_13_0 = (RuleCall)cTransitionsAssignment_13.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_14 = (Keyword)cGroup.eContents().get(14);
		private final Keyword cInitialStateKeyword_15 = (Keyword)cGroup.eContents().get(15);
		private final Assignment cInitialiStateAssignment_16 = (Assignment)cGroup.eContents().get(16);
		private final CrossReference cInitialiStateStateCrossReference_16_0 = (CrossReference)cInitialiStateAssignment_16.eContents().get(0);
		private final RuleCall cInitialiStateStateIDTerminalRuleCall_16_0_1 = (RuleCall)cInitialiStateStateCrossReference_16_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_17 = (Keyword)cGroup.eContents().get(17);
		
		//Statemachine:
		//	"statemachine" name=ID "{" "states" "{" states+=State* "}" "events" "{" events+=Event* "}" "transitions" "{"
		//	transitions+=Transition* "}" "initialState" initialiState=[State] "}";
		public ParserRule getRule() { return rule; }

		//"statemachine" name=ID "{" "states" "{" states+=State* "}" "events" "{" events+=Event* "}" "transitions" "{"
		//transitions+=Transition* "}" "initialState" initialiState=[State] "}"
		public Group getGroup() { return cGroup; }

		//"statemachine"
		public Keyword getStatemachineKeyword_0() { return cStatemachineKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//"states"
		public Keyword getStatesKeyword_3() { return cStatesKeyword_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//states+=State*
		public Assignment getStatesAssignment_5() { return cStatesAssignment_5; }

		//State
		public RuleCall getStatesStateParserRuleCall_5_0() { return cStatesStateParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }

		//"events"
		public Keyword getEventsKeyword_7() { return cEventsKeyword_7; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_8() { return cLeftCurlyBracketKeyword_8; }

		//events+=Event*
		public Assignment getEventsAssignment_9() { return cEventsAssignment_9; }

		//Event
		public RuleCall getEventsEventParserRuleCall_9_0() { return cEventsEventParserRuleCall_9_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }

		//"transitions"
		public Keyword getTransitionsKeyword_11() { return cTransitionsKeyword_11; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_12() { return cLeftCurlyBracketKeyword_12; }

		//transitions+=Transition*
		public Assignment getTransitionsAssignment_13() { return cTransitionsAssignment_13; }

		//Transition
		public RuleCall getTransitionsTransitionParserRuleCall_13_0() { return cTransitionsTransitionParserRuleCall_13_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_14() { return cRightCurlyBracketKeyword_14; }

		//"initialState"
		public Keyword getInitialStateKeyword_15() { return cInitialStateKeyword_15; }

		//initialiState=[State]
		public Assignment getInitialiStateAssignment_16() { return cInitialiStateAssignment_16; }

		//[State]
		public CrossReference getInitialiStateStateCrossReference_16_0() { return cInitialiStateStateCrossReference_16_0; }

		//ID
		public RuleCall getInitialiStateStateIDTerminalRuleCall_16_0_1() { return cInitialiStateStateIDTerminalRuleCall_16_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_17() { return cRightCurlyBracketKeyword_17; }
	}

	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "State");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//State:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class EventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Event");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Event:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class TransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Transition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFromAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cFromStateCrossReference_0_0 = (CrossReference)cFromAssignment_0.eContents().get(0);
		private final RuleCall cFromStateIDTerminalRuleCall_0_0_1 = (RuleCall)cFromStateCrossReference_0_0.eContents().get(1);
		private final Keyword cAsteriskKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEventAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cEventEventCrossReference_2_0 = (CrossReference)cEventAssignment_2.eContents().get(0);
		private final RuleCall cEventEventIDTerminalRuleCall_2_0_1 = (RuleCall)cEventEventCrossReference_2_0.eContents().get(1);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cToAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cToStateCrossReference_4_0 = (CrossReference)cToAssignment_4.eContents().get(0);
		private final RuleCall cToStateIDTerminalRuleCall_4_0_1 = (RuleCall)cToStateCrossReference_4_0.eContents().get(1);
		
		//Transition:
		//	from=[State] "*" event=[Event] "->" to=[State];
		public ParserRule getRule() { return rule; }

		//from=[State] "*" event=[Event] "->" to=[State]
		public Group getGroup() { return cGroup; }

		//from=[State]
		public Assignment getFromAssignment_0() { return cFromAssignment_0; }

		//[State]
		public CrossReference getFromStateCrossReference_0_0() { return cFromStateCrossReference_0_0; }

		//ID
		public RuleCall getFromStateIDTerminalRuleCall_0_0_1() { return cFromStateIDTerminalRuleCall_0_0_1; }

		//"*"
		public Keyword getAsteriskKeyword_1() { return cAsteriskKeyword_1; }

		//event=[Event]
		public Assignment getEventAssignment_2() { return cEventAssignment_2; }

		//[Event]
		public CrossReference getEventEventCrossReference_2_0() { return cEventEventCrossReference_2_0; }

		//ID
		public RuleCall getEventEventIDTerminalRuleCall_2_0_1() { return cEventEventIDTerminalRuleCall_2_0_1; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_3() { return cHyphenMinusGreaterThanSignKeyword_3; }

		//to=[State]
		public Assignment getToAssignment_4() { return cToAssignment_4; }

		//[State]
		public CrossReference getToStateCrossReference_4_0() { return cToStateCrossReference_4_0; }

		//ID
		public RuleCall getToStateIDTerminalRuleCall_4_0_1() { return cToStateIDTerminalRuleCall_4_0_1; }
	}
	
	
	private StatemachineElements pStatemachine;
	private StateElements pState;
	private EventElements pEvent;
	private TransitionElements pTransition;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public StatemachineGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.statemachine.Statemachine".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Statemachine:
	//	"statemachine" name=ID "{" "states" "{" states+=State* "}" "events" "{" events+=Event* "}" "transitions" "{"
	//	transitions+=Transition* "}" "initialState" initialiState=[State] "}";
	public StatemachineElements getStatemachineAccess() {
		return (pStatemachine != null) ? pStatemachine : (pStatemachine = new StatemachineElements());
	}
	
	public ParserRule getStatemachineRule() {
		return getStatemachineAccess().getRule();
	}

	//State:
	//	name=ID;
	public StateElements getStateAccess() {
		return (pState != null) ? pState : (pState = new StateElements());
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}

	//Event:
	//	name=ID;
	public EventElements getEventAccess() {
		return (pEvent != null) ? pEvent : (pEvent = new EventElements());
	}
	
	public ParserRule getEventRule() {
		return getEventAccess().getRule();
	}

	//Transition:
	//	from=[State] "*" event=[Event] "->" to=[State];
	public TransitionElements getTransitionAccess() {
		return (pTransition != null) ? pTransition : (pTransition = new TransitionElements());
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
