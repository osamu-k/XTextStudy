/**
 * generated by Xtext
 */
package org.xtext.example.statemachine.validation;

import com.google.common.base.Objects;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.validation.Check;
import org.xtext.example.statemachine.statemachine.Statemachine;
import org.xtext.example.statemachine.statemachine.StatemachinePackage;
import org.xtext.example.statemachine.validation.AbstractStatemachineValidator;

/**
 * Custom validation rules.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#validation
 */
@SuppressWarnings("all")
public class StatemachineValidator extends AbstractStatemachineValidator {
  @Check
  public void checkStatesNotDuplicated(final org.xtext.example.statemachine.statemachine.State s) {
    EObject _eContainer = s.eContainer();
    EList<org.xtext.example.statemachine.statemachine.State> _states = ((Statemachine) _eContainer).getStates();
    for (final org.xtext.example.statemachine.statemachine.State other : _states) {
      boolean _and = false;
      boolean _notEquals = (!Objects.equal(s, other));
      if (!_notEquals) {
        _and = false;
      } else {
        String _name = s.getName();
        String _string = _name.toString();
        String _name_1 = other.getName();
        String _string_1 = _name_1.toString();
        boolean _equals = _string.equals(_string_1);
        _and = (_notEquals && _equals);
      }
      if (_and) {
        this.warning("State names have to be unique", StatemachinePackage.Literals.STATE__NAME);
      }
    }
  }
}
